version: 2.1

orbs:
    codecov: codecov/codecov@3.3.0

references:
    docker_image: &docker_image
        - image: cypress/base:16.17.1
          environment:
              TERM: xterm

commands:
    setup:
        description: "Setup command to install/bootstrap/build"
        steps:
            -   restore_cache:
                    name: Restore pnpm Package Cache
                    keys:
                        - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
            -   run:
                    name: Install pnpm package manager
                    command: |
                        corepack enable
                        corepack prepare pnpm@8.4.0 --activate

    bundle:
        description: "Create UMD bundles"
        steps:
            - run:
                name: Bundle for Production
                command: pnpm bundle:prod

    sb:
       description: Build Storybook
       steps:
           - run:
                name: Build Storybook
                command: pnpm sb:build:internal

    prepare-e2e:
        description: "Prepare for cypress e2e tests"
        steps:
            - run:
                  name: Install cypress
                  command: pnpm cypress install
            - run:
                  name: Verify cypress
                  command: npx cypress verify

    run-e2e-http:
        description: "Run http servers for e2e tests"
        steps:
          - run:
                name: Serve built Storybook
                command: pnpm sb:serve
                background: true
          - run:
                name: Serve bundled js files
                command: pnpm bundle:serve
                background: true

    run-e2e:
       description: "Run cypress e2e tests"
       steps:
           - run:
                 name: Run cypress e2e
                 command: |
                    echo RUNNING SPECS = $(tr [:blank:] ',' < /tmp/specs-to-run)
                    pnpm cy:run:ci --spec $(tr [:blank:] ',' < /tmp/specs-to-run)

jobs:
    setup:
        docker: *docker_image
        steps:
            - checkout
            - setup
            - run: pnpm install
            - run: pnpm build
            - save_cache:
                    name: Save pnpm Package Cache
                    key: pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
                    paths:
                        - node_modules
            -   persist_to_workspace:
                    root: .
                    paths:
                        - node_modules
                        - packages

    test:
        docker: *docker_image
        steps:
            - checkout
            - setup
            - attach_workspace:
                  at: .
            - run:
                  name: Test Code (lint, flow, types)
                  command: pnpm test:ci
            - run:
                  name: Vitest with coverage
                  command: pnpm vitest:ci
            - store_test_results:
                  path: reports/junit
            - store_artifacts:
                  path: reports/junit
            - store_artifacts:
                  path: coverage
            - persist_to_workspace:
                  root: .
                  paths:
                      - coverage

    coverage:
        docker: *docker_image
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - run:
                name: install curl
                command: |
                    apt-get -y update && \
                    apt-get -y install \
                    git \
                    libcurl4 \
                    libcurl3-gnutls \
                    libcurl3-nss \
                    xdg-utils \
                    wget \
                    curl
            - run:
                name: Install and set Linuxbrew
                command: |
                    sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
                    echo 'export PATH="/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin/:$PATH"' >> $BASH_ENV
                    echo 'export MANPATH="/home/linuxbrew/.linuxbrew/share/man:$MANPATH"' >> $BASH_ENV
                    echo 'export INFOPATH="/home/linuxbrew/.linuxbrew/share/info:$INFOPATH"' >> $BASH_ENV

            - run:
                name: install gnu
                command: |
                    export HOMEBREW_NO_AUTO_UPDATE=true
                    export HOMEBREW_NO_INSTALL_CLEANUP=true
                    brew install gnupg

            - codecov/upload

    bundle:
        docker: *docker_image
        steps:
            - checkout
            - setup
            - attach_workspace:
                at: .
            - bundle
            - store_artifacts:
                path: bundle
            - persist_to_workspace:
                root: .
                paths:
                    - bundle

    build-sb:
        docker: *docker_image
        steps:
            - checkout
            - setup
            - attach_workspace:
                at: .
            - sb
            - persist_to_workspace:
                root: .
                paths:
                   - .sb-static

    cypress-prepare:
        docker: *docker_image
        steps:
            - checkout
            - setup
            - attach_workspace:
                  at: .
            - prepare-e2e
            - save_cache:
                    key: cy-install-{{ checksum "pnpm-lock.yaml" }}
                    paths:
                        - /root/.cache/Cypress

    cypress-run:
        docker: *docker_image
        parallelism: 5
        steps:
            - checkout
            - setup
            - attach_workspace:
                  at: .
            - run:
                name: Split tests by timing
                command: |
                    circleci tests glob "cypress/integration/**/*-spec.js" | circleci tests split --split-by=timings > /tmp/specs-to-run
            - run-e2e-http
            - restore_cache:
                keys:
                    - cy-install-{{ checksum "pnpm-lock.yaml" }}
            - run-e2e
            -  run:
                when: always
                name: Fix junit reporter XML files attributes
                command: |
                    node scripts/fix-junit-report.js
            - store_artifacts:
                  path: cypress/screenshots
            - store_artifacts:
                  path: cypress/videos
            - store_test_results:
                  path: cypress/results

workflows:
    create-rpldy:
        jobs:
            - setup
            - test:
                  requires:
                      - setup
            - coverage:
                  requires:
                      - test
                  filters:
                      branches:
                          only: master
            - bundle:
                  requires:
                      - setup
            - build-sb:
                  requires:
                      - setup
            - cypress-prepare:
                  requires:
                      - setup
            - cypress-run:
                  requires:
                      - cypress-prepare
                      - bundle
                      - build-sb
