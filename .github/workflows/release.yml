name: Uploady Release

on:
    workflow_dispatch:
        branches:
            - "release-**"
        inputs:
           version:
               type: choice
               description: Which version to release?
               required: false
               default: "patch"
               options:
                   - "rc"
                   - "alpha"
                   - "patch"
                   - "minor"
                   - "major"

#permissions:
#    id-token: write
#    contents: write

defaults:
    run:
        shell: bash
        #working-directory:

jobs:
    release:
        name: Release Uploady
        environment: "Release"
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - uses: actions/setup-node@v3
              with:
                node-version: "16.17"
                cache: "yarn"
                #cache-dependency-path: "yarn.lock"

            - name: Install Deps
              run: yarn --frozen-lockfile

            - name: Extract Version Changelog
              id: version-log
              uses: ./.github/actions/versionLog

            - name: Prepare
              run: yarn bootstrap

            - name: Clean
              run: yarn clean

            - name: Define Lerna Args
              id: lerna-args
              run: |
                  if [ '${{ inputs.version }}' = 'rc' ]
                  then
                    echo "using args for RC release"
                    echo "VERSION=prerelease --preid rc" >> $GITHUB_OUTPUT
                    echo "PUBLISH=--dist-tag next" >> $GITHUB_OUTPUT
                    echo "PRE_RELEASE=true" >> $GITHUB_OUTPUT
                  elif [ '${{ inputs.version }}' = 'alpha' ]
                  then
                    echo "using args for Alpha release"
                    echo "VERSION=prerelease" >> $GITHUB_OUTPUT
                    echo "PUBLISH=--dist-tag alpha" >> $GITHUB_OUTPUT
                    echo "PRE_RELEASE=true" >> $GITHUB_OUTPUT
                  else
                    echo "using args for ${{ inputs.version }} release"
                    echo "VERSION=${{ inputs.version }}" >> $GITHUB_OUTPUT
                    echo "PRE_RELEASE=false" >> $GITHUB_OUTPUT
                  fi

            - name: Define GIT Author
              run: |
                  git config user.email "ci@react-uploady.org"
                  git config user.name "Uploady CI"

            - name: Create Version
              run: |
                  echo "### Version ARGS: ${{ steps.lerna-args.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
                  lerna version ${{ steps.lerna-args.outputs.VERSION }} --force-publish=* --yes

            - name: Build Source
              run: yarn build

            - name: Bundle Source
              run: yarn bundle:prod

            - name: Authenticate with NPM Registry
              run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
              env:
                NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: Publish
              run: |
                lerna publish from-package ${{ steps.lerna-args.outputs.PUBLISH }} --yes
                echo "## Published: ${{ format('v{0}', steps.version-log.outputs.VERSION) }} :rocket:" >> $GITHUB_STEP_SUMMARY

            - name: Create GH Release
              uses: ncipollo/release-action@v1
              with:
                name: ${{ format('v{0}', steps.version-log.outputs.VERSION) }}
                body: ${{ steps.version-log.outputs.VERSION_LOG }}
                #draft: true
                prerelease: ${{ fromJSON(steps.lerna-args.outputs.PRE_RELEASE) }}
                tag: ${{ format('v{0}', steps.version-log.outputs.VERSION) }}


            - name: Revert changes

              #TODO - lerna version + delte tag

#            - name: Commit changes to GIT
#              run: |
#                git commit -a -m "chore: release v${{ steps.version-log.outputs.VERSION }}"
#                git push
#git tag -a ui-${{ steps.version-bump.outputs.NEW_VERSION }} -m "${{ steps.version-bump.outputs.GIT_PUSH_MSG }}"
#git push origin ui-${{ steps.version-bump.outputs.NEW_VERSION }}

#     echo "## PUBLISH ARGS: ${{ steps.lerna-args.outputs.PUBLISH }} :rocket:" >> $GITHUB_STEP_SUMMARY


# uses last commit details:
#"$(git log -n 1 --pretty=format:%an)"
#"$(git log -n 1 --pretty=format:%ae)"

#    - name: Cache node_modules
#          id: cache-node-modules
#          uses: actions/cache@v3
#          with:
#          path: node_modules
#          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
#          restore-keys: |
#              ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

