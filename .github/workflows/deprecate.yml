name: Uploady Version Deprecate

on:
    workflow_dispatch:
        inputs:
            version:
                description: 'Version to deprecate (e.g. 1.9.0)'
                required: false
                type: choice
                default: ""
                options:
                    - ""
            message:
                description: 'Deprecation message'
                required: false
                default: 'This version is deprecated, please upgrade to the latest version'
                type: string

permissions:
    id-token: write
    contents: write

defaults:
    run:
        shell: bash

jobs:
    fetch-versions:
        name: Fetch Non-Deprecated Versions
        runs-on: ubuntu-latest
        if: ${{ inputs.version == '' }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Prepare
              uses: ./.github/actions/prepare
              with:
                  with-frozen: false
                  dir: ./.github

            -   name: Fetch non-deprecated versions
                id: fetch-versions
                run: |
                    # Fetch all versions from npm for @rpldy/uploady
                    echo "Fetching versions from npm for @rpldy/uploady..."

                    # Get package info including versions and deprecated info
                    PACKAGE_INFO=$(npm view @rpldy/uploady --json)

                    # Extract all versions (guaranteed to be valid JSON array)
                    ALL_VERSIONS=$(echo "$PACKAGE_INFO" | jq -r '.versions')

                    # Extract deprecated versions object (if exists)
                    DEPRECATED=$(echo "$PACKAGE_INFO" | jq -r 'if has("deprecated") then .deprecated else {} end')

                    # Filter out deprecated versions
                    NON_DEPRECATED=$(echo "$ALL_VERSIONS" | jq -r --argjson deprecated "$DEPRECATED" '[.[] | select($deprecated[.] == null)]')

                    echo "NON_DEPRECATED_VERSIONS=$NON_DEPRECATED" >> $GITHUB_OUTPUT
                    echo "Found non-deprecated versions: $NON_DEPRECATED"

            - name: Update workflow file
              uses: ./.github/actions/save-versions-to-wf
              with:
                  workflow-file: ./.github/workflows/deprecate.yml
                  workflow-input: version

            - name: Summary
              run: |
                  echo "### ✅ Successfully updated available versions" >> $GITHUB_STEP_SUMMARY
                  echo "The workflow has been updated with all non-deprecated versions from npm." >> $GITHUB_STEP_SUMMARY

    deprecate:
        name: Deprecate Version
        runs-on: ubuntu-latest
        environment: "Release"
        if: ${{ inputs.version != '' }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Prepare
              uses: ./.github/actions/prepare
              with:
                  with-frozen: true

            - name: Deprecate version
              uses: ./.github/actions/npm-deprecate
              with:
                  version: ${{ inputs.version }}
                  message: ${{ inputs.message }}
                  token: ${{ secrets.NPM_TOKEN }}

#            - name: Fallback to manual deprecation
#              if: failure()
#              run: |
#                  echo "Action deprecation failed, falling back to manual method"
#                  PACKAGES=$(npx lerna ls --json | jq -r '.[].name' | tr '\n' ' ')
#                  VERSION="${{ inputs.version }}"
#                  MESSAGE="${{ inputs.message }}"
#
#                  echo "### Deprecating the following packages:" >> $GITHUB_STEP_SUMMARY
#
#                  for pkg in $PACKAGES; do
#                    echo "- Deprecating $pkg@$VERSION" >> $GITHUB_STEP_SUMMARY
#                    npm deprecate "$pkg@$VERSION" "$MESSAGE"
#                  done

            - name: Summary
              run: |
                  echo "### ✅ Deprecation completed successfully" >> $GITHUB_STEP_SUMMARY
                  echo "Deprecated version ${{ inputs.version }} with message: ${{ inputs.message }}" >> $GITHUB_STEP_SUMMARY
